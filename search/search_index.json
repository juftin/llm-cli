{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"llm-term","text":"<p>Chat with LLM models directly from the command line.</p> <p> </p> <p> </p> Screen Recording    Your browser does not support the video tag."},{"location":"#installation","title":"Installation","text":"<pre><code>pipx install llm-term\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Then, you can chat with the model directly from the command line:</p> <pre><code>llm-term\n</code></pre> <p><code>llm-term</code> works with multiple LLM providers, but by default it uses OpenAI. Most providers require extra packages to be installed, so make sure you read the Providers section below. To use a different provider, you can set the <code>--provider</code> / <code>-p</code> flag:</p> <pre><code>llm-term --provider anthropic\n</code></pre> <p>If needed, make sure you have your LLM's API key set as an environment variable (this can also set via the <code>--api-key</code> / <code>-k</code> flag in the CLI). If your LLM uses a particular environment variable for its API key, such as <code>OPENAI_API_KEY</code>, that will be detected automatically.</p> <pre><code>export LLM_API_KEY=\"xxxxxxxxxxxxxx\"\n</code></pre> <p>Optionally, you can set a custom model. llm-term defaults to <code>gpt-3.5-turbo</code> (this can also set via the <code>--model</code> / <code>-m</code> flag in the CLI):</p> <pre><code>export LLM_MODEL=\"gpt-4\"\n</code></pre> <p>Want to start the conversion directly from the command line? No problem, just pass your prompt to <code>llm-term</code>:</p> <pre><code>llm-term show me python code to detect a palindrome\n</code></pre> <p>You can also set a custom system prompt. llm-term defaults to a reasonable prompt for chatting with the model, but you can set your own prompt (this can also set via the <code>--system</code> / <code>-s</code> flag in the CLI):</p> <pre><code>export LLM_SYSTEM_MESSAGE=\"You are a helpful assistant who talks like a pirate.\"\n</code></pre>"},{"location":"#providers","title":"Providers","text":""},{"location":"#openai","title":"OpenAI","text":"<p>By default, llm-term uses OpenAI as your LLM provider. The default model is <code>gpt-3.5-turbo</code> and you can also use the <code>OPENAI_API_KEY</code> environment variable to set your API key.</p>"},{"location":"#anthropic","title":"Anthropic","text":"<p>Anthropic is a new LLM provider that is currently in private beta. You can request access to the beta here. The default model is <code>claude</code>, and you can use the <code>ANTHROPIC_API_KEY</code> environment variable. To use <code>anthropic</code> as your provider you must install the <code>anthropic</code> extra.</p> <pre><code>pipx install \"llm-term[anthropic]\"\n</code></pre> <pre><code>llm-term --provider anthropic\n</code></pre>"},{"location":"#mistralai","title":"MistralAI","text":"<p>MistralAI is a European LLM provider. You can request access to the MistralAI here. The default model is <code>mistral-small</code>, and you can use the <code>MISTRAL_API_KEY</code> environment variable.</p> <pre><code>pipx install \"llm-term[mistralai]\"\n</code></pre> <pre><code>llm-term --provider mistralai\n</code></pre>"},{"location":"#gpt4all","title":"GPT4All","text":"<p>GPT4All is a an open source LLM provider. These models run locally on your machine, so you don't need to worry about API keys or rate limits. The default model is <code>mistral-7b-openorca.Q4_0.gguf</code>, and you can see what models are available on the GPT4All Website. Models are downloaded automatically when you first use them. To use GPT4All as your provider you must install the <code>gpt4all</code> extra.</p> <pre><code>pipx install \"llm-term[gpt4all]\"\n</code></pre> <pre><code>llm-term --provider gpt4all --model mistral-7b-openorca.Q4_0.gguf\n</code></pre>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#llm-term","title":"llm-term","text":"<p>llm-term is a command line interface for OpenAI's Chat API.</p> <p>Usage:</p> <pre><code>llm-term [OPTIONS] [CHAT]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--model</code>, <code>-m</code> text The LLM model to use None <code>--provider</code>, <code>-p</code> choice (<code>openai</code> | <code>anthropic</code> | <code>gpt4all</code> | <code>mistralai</code>) The LLM provider to use <code>openai</code> <code>--system</code>, <code>-s</code> text The system message to use None <code>--api-key</code>, <code>-k</code> text The API key to use None <code>--stream</code> / <code>--no-stream</code> boolean Stream the response <code>True</code> <code>--console</code>, <code>-c</code> integer The console width to use - defaults to auto-detect None <code>--border</code> / <code>--no-border</code> boolean Use a border for returned responses - disable for copy/paste <code>True</code> <code>--avatar</code>, <code>-a</code> text The avatar to use <code>\ud83e\udd13</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#environment-setup","title":"Environment Setup","text":"<p>pipx</p> <p>This documentaion uses pipx to install and manage non-project command line tools like <code>hatch</code> and <code>pre-commit</code>. If you don't already have <code>pipx</code> installed, make sure to see their documentation. If you prefer not to use <code>pipx</code>, you can use <code>pip</code> instead.</p> <ol> <li> <p>Install hatch</p> <pre><code>pipx install hatch\n</code></pre> <p>pre-commit</p> <p>Hatch will attempt to set up pre-commit hooks for you using pre-commit. If you don't already, make sure to install pre-commit as well: <code>pipx install pre-commit</code></p> </li> <li> <p>Build the Virtual Environment</p> <pre><code>hatch env create\n</code></pre> </li> <li> <p>If you need to, you can link hatch's virtual environment to your IDE.     It's located in the <code>.venv</code> directory at the root of the project.</p> </li> <li> <p>Activate the Virtual Environment</p> <pre><code>hatch shell\n</code></pre> </li> </ol>"},{"location":"contributing/#using-hatch","title":"Using Hatch","text":""},{"location":"contributing/#hatch-cheat-sheet","title":"Hatch Cheat Sheet","text":"Command Description Command Notes Run Tests <code>hatch run cov</code> Runs tests with <code>pytest</code> and <code>coverage</code> Run Formatting <code>hatch run lint:fmt</code> Runs <code>ruff</code> code formatter Run Linting <code>hatch run lint:all</code> Runs <code>ruff</code> and <code>mypy</code> linters / type checkers Run Type Checking <code>hatch run lint:typing</code> Runs <code>mypy</code> type checker Update Requirements Lock Files <code>hatch run gen:reqs</code> Updating lock file using <code>pip-compile</code> Upgrade Dependencies <code>hatch run gen:reqs-update</code> Updating lock file using <code>pip-compile</code> and <code>--update</code> flag Serve the Documentation <code>hatch run docs:serve</code> Serve the documentation using MkDocs Run the <code>pre-commit</code> Hooks <code>hatch run lint:precommit</code> Runs the <code>pre-commit</code> hooks on all files"},{"location":"contributing/#hatch-explanation","title":"Hatch Explanation","text":"<p>Hatch is a Python package manager. It's most basic use is as a standardized build-system. However, hatch also has some extra features which this project takes advantage of. These features include virtual environment management and the organization of common scripts like linting and testing. All the operations in hatch take place in one of its managed virtual environments.</p> <p>Hatch has a variety of environments, to see them simply ask hatch:</p> hatch CLIOutput <pre><code>hatch env show\n</code></pre> <pre><code>                                Standalone                                 \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name    \u2503 Type    \u2503 Features \u2503 Dependencies               \u2503 Scripts     \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 default \u2502 virtual \u2502 all      \u2502 coverage[toml]&gt;=6.5        \u2502 cov         \u2502\n\u2502         \u2502         \u2502          \u2502 pytest                     \u2502 cov-report  \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test        \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test-cov    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 docs    \u2502 virtual \u2502 all      \u2502 markdown-exec[ansi]~=1.6.0 \u2502 build       \u2502\n\u2502         \u2502         \u2502          \u2502 mkdocs-click~=0.8.1        \u2502 cov         \u2502\n\u2502         \u2502         \u2502          \u2502 mkdocs-material~=9.2.3     \u2502 cov-report  \u2502\n\u2502         \u2502         \u2502          \u2502 mkdocstrings~=0.22.0       \u2502 deploy      \u2502\n\u2502         \u2502         \u2502          \u2502 mkdocs~=1.5.2              \u2502 serve       \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test        \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test-cov    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 gen     \u2502 virtual \u2502 all      \u2502 pip-tools~=7.1.0           \u2502 cov         \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 cov-report  \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 release     \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 reqs        \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 reqs-update \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test        \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 test-cov    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 lint    \u2502 virtual \u2502          \u2502 mypy&gt;=1.6.1                \u2502 all         \u2502\n\u2502         \u2502         \u2502          \u2502 ruff~=0.1.4                \u2502 fmt         \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 precommit   \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 style       \u2502\n\u2502         \u2502         \u2502          \u2502                            \u2502 typing      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                  Matrices                                   \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name \u2503 Type    \u2503 Envs       \u2503 Features \u2503 Dependencies        \u2503 Scripts    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 all  \u2502 virtual \u2502 all.py3.8  \u2502 all      \u2502 coverage[toml]&gt;=6.5 \u2502 cov        \u2502\n\u2502      \u2502         \u2502 all.py3.9  \u2502          \u2502 pytest              \u2502 cov-report \u2502\n\u2502      \u2502         \u2502 all.py3.10 \u2502          \u2502                     \u2502 test       \u2502\n\u2502      \u2502         \u2502 all.py3.11 \u2502          \u2502                     \u2502 test-cov   \u2502\n\u2502      \u2502         \u2502 all.py3.12 \u2502          \u2502                     \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>That above command will tell you that there are four environments that you can use:</p> <ul> <li><code>default</code></li> <li><code>docs</code></li> <li><code>gen</code></li> <li><code>lint</code></li> </ul> <p>Each of these environments has a set of commands that you can run. To see the commands for a specific environment, run:</p> hatch CLIOutput <pre><code>hatch env show default\n</code></pre> <pre><code>                            Standalone                             \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name    \u2503 Type    \u2503 Features \u2503 Dependencies        \u2503 Scripts    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 default \u2502 virtual \u2502 all      \u2502 coverage[toml]&gt;=6.5 \u2502 cov        \u2502\n\u2502         \u2502         \u2502          \u2502 pytest              \u2502 cov-report \u2502\n\u2502         \u2502         \u2502          \u2502                     \u2502 test       \u2502\n\u2502         \u2502         \u2502          \u2502                     \u2502 test-cov   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Here we can see that the <code>default</code> environment has the following commands:</p> <ul> <li><code>cov</code></li> <li><code>cov-report</code></li> <li><code>test</code></li> <li><code>test-cov</code></li> </ul> <p>The one that we're interested in is <code>cov</code>, which will run the tests for the project.</p> <pre><code>hatch run cov\n</code></pre> <p>Since <code>cov</code> is in the default environment, we can run it without specifying the environment. However, to run the <code>serve</code> command in the <code>docs</code> environment, we need to specify the environment:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>You can see what scripts are available using the <code>env show</code> command</p> hatch CLIOutput <pre><code>hatch env show docs\n</code></pre> <pre><code>                              Standalone                               \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name \u2503 Type    \u2503 Features \u2503 Dependencies               \u2503 Scripts    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 docs \u2502 virtual \u2502 all      \u2502 markdown-exec[ansi]~=1.6.0 \u2502 build      \u2502\n\u2502      \u2502         \u2502          \u2502 mkdocs-click~=0.8.1        \u2502 cov        \u2502\n\u2502      \u2502         \u2502          \u2502 mkdocs-material~=9.2.3     \u2502 cov-report \u2502\n\u2502      \u2502         \u2502          \u2502 mkdocstrings~=0.22.0       \u2502 deploy     \u2502\n\u2502      \u2502         \u2502          \u2502 mkdocs~=1.5.2              \u2502 serve      \u2502\n\u2502      \u2502         \u2502          \u2502                            \u2502 test       \u2502\n\u2502      \u2502         \u2502          \u2502                            \u2502 test-cov   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"contributing/#committing-code","title":"Committing Code","text":"<p>This project uses pre-commit to run a set of checks on the code before it is committed. The pre-commit hooks are installed by hatch automatically when you run it for the first time.</p> <p>This project uses semantic-versioning standards, managed by semantic-release. Releases for this project are handled entirely by CI/CD via pull requests being merged into the <code>main</code> branch. Contributions follow the gitmoji standards with conventional commits.</p> <p>While you can denote other changes on your commit messages with gitmoji, the following commit message emoji prefixes are the only ones to trigger new releases:</p> Emoji Shortcode Description Semver \ud83d\udca5 :boom: Introduce breaking changes. Major \u2728 :sparkles: Introduce new features. Minor \ud83d\udc1b :bug: Fix a bug. Patch \ud83d\ude91 :ambulance: Critical hotfix. Patch \ud83d\udd12 :lock: Fix security issues. Patch <p>Most features can be squash merged into a single commit on a pull-request. When merging multiple commits, they will be summarized into a single release.</p> <p>If you're working on a new feature, your commit message might look like:</p> <pre><code>\u2728 New Feature Description\n</code></pre> <p>Bug fix commits would look like this:</p> <pre><code>\ud83d\udc1b Bug Fix Description\n</code></pre> <p>If you're working on a feature that introduces breaking changes, your commit message might look like:</p> <pre><code>\ud83d\udca5 Breaking Change Description\n</code></pre> <p>Other commits that don't trigger a release, but get included in the release notes might look like:</p> <pre><code>\ud83d\udcdd Documentation Update Description\n\ud83d\udc77 CI/CD Update Description\n\ud83e\uddea Testing Changes Description\n\ud83d\ude9a Moving/Renaming Description\n\u2b06\ufe0f Dependency Upgrade Description\n</code></pre>"},{"location":"contributing/#pre-releases","title":"Pre-Releases","text":"<p>semantic-release supports pre-releases. To trigger a pre-release, you would merge your pull request into an <code>alpha</code> or <code>beta</code> branch.</p>"},{"location":"contributing/#specific-release-versions","title":"Specific Release Versions","text":"<p>In some cases you need more advanced control around what kind of release you need to create. If you need to release a specific version, you can do so by creating a new branch with the version number as the branch name. For example, if the current version is <code>2.3.2</code>, but you need to release a fix as <code>1.2.5</code>, you would create a branch named <code>1.2.x</code> and merge your changes into that branch.</p> <p>See the semantic-release documentation for more information about branch based releases and other advanced release cases.</p>"}]}